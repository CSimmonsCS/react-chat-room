{"ast":null,"code":"import _objectSpread from \"/Users/cdot/Desktop/Road To React book projects/reactWithFirebase/react-firebase-authentication/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    this.doCreateUserWithEmailAndPassword = (email, password) => this.auth.createUserWithEmailAndPassword(email, password);\n\n    this.doSignInWithEmailAndPassword = (email, password) => this.auth.signInWithEmailAndPassword(email, password);\n\n    this.doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n    this.doSignInWithFacebook = () => this.auth.signInWithPopup(this.facebookProvider);\n\n    this.doSignInWithTwitter = () => this.auth.signInWithPopup(this.twitterProvider);\n\n    this.doSendEmailVerification = () => this.auth.currentUser.sendEmailVerification({\n      url: \"http://localhost:3000\"\n    });\n\n    this.doSignOut = () => this.auth.signOut();\n\n    this.doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n    this.doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n    this.onAuthUserListener = (next, fallback) => this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid).once(\"value\").then(snapshot => {\n          const dbUser = snapshot.val(); // console.log(authUser.uid);\n          // default empty roles\n\n          if (!dbUser.roles) {\n            dbUser.roles = {};\n          } // merge auth and db user\n\n\n          authUser = _objectSpread({\n            uid: authUser.uid,\n            email: authUser.email,\n            emailVerified: authUser.emailVerified,\n            providerData: authUser.providerData\n          }, dbUser);\n          next(authUser);\n        });\n      } else {\n        fallback();\n      }\n    });\n\n    this.user = uid => this.db.ref(`users/${uid}`);\n\n    this.users = () => this.db.ref(\"users\");\n\n    this.message = uid => this.db.ref(`messages/${uid}`);\n\n    this.messages = () => this.db.ref(\"messages\");\n\n    app.initializeApp(config);\n    /*Helpter*/\n\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n    this.auth = app.auth();\n    this.db = app.database();\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  } //*** Auth API ***\n\n\n}\n\nexport default Firebase;","map":{"version":3,"sources":["/Users/cdot/Desktop/Road To React book projects/reactWithFirebase/react-firebase-authentication/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","constructor","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSendEmailVerification","currentUser","sendEmailVerification","url","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","db","ref","users","message","messages","initializeApp","serverValue","database","ServerValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider"],"mappings":";AAAA,OAAOA,GAAP,MAAgB,cAAhB;AACA,OAAO,eAAP;AACA,OAAO,mBAAP;AAEA,MAAMC,MAAM,GAAG;AACbC,EAAAA,MAAM,EAAEC,OAAO,CAACC,GAAR,CAAYC,iBADP;AAEbC,EAAAA,UAAU,EAAEH,OAAO,CAACC,GAAR,CAAYG,qBAFX;AAGbC,EAAAA,WAAW,EAAEL,OAAO,CAACC,GAAR,CAAYK,sBAHZ;AAIbC,EAAAA,SAAS,EAAEP,OAAO,CAACC,GAAR,CAAYO,oBAJV;AAKbC,EAAAA,aAAa,EAAET,OAAO,CAACC,GAAR,CAAYS,wBALd;AAMbC,EAAAA,iBAAiB,EAAEX,OAAO,CAACC,GAAR,CAAYW;AANlB,CAAf;;AASA,MAAMC,QAAN,CAAe;AACbC,EAAAA,WAAW,GAAG;AAAA,SAedC,gCAfc,GAeqB,CAACC,KAAD,EAAQC,QAAR,KACjC,KAAKC,IAAL,CAAUC,8BAAV,CAAyCH,KAAzC,EAAgDC,QAAhD,CAhBY;;AAAA,SAkBdG,4BAlBc,GAkBiB,CAACJ,KAAD,EAAQC,QAAR,KAC7B,KAAKC,IAAL,CAAUG,0BAAV,CAAqCL,KAArC,EAA4CC,QAA5C,CAnBY;;AAAA,SAqBdK,kBArBc,GAqBO,MAAM,KAAKJ,IAAL,CAAUK,eAAV,CAA0B,KAAKC,cAA/B,CArBb;;AAAA,SAuBdC,oBAvBc,GAuBS,MAAM,KAAKP,IAAL,CAAUK,eAAV,CAA0B,KAAKG,gBAA/B,CAvBf;;AAAA,SAyBdC,mBAzBc,GAyBQ,MAAM,KAAKT,IAAL,CAAUK,eAAV,CAA0B,KAAKK,eAA/B,CAzBd;;AAAA,SA2BdC,uBA3Bc,GA2BY,MACxB,KAAKX,IAAL,CAAUY,WAAV,CAAsBC,qBAAtB,CAA4C;AAC1CC,MAAAA,GAAG,EAAE;AADqC,KAA5C,CA5BY;;AAAA,SAgCdC,SAhCc,GAgCF,MAAM,KAAKf,IAAL,CAAUgB,OAAV,EAhCJ;;AAAA,SAkCdC,eAlCc,GAkCInB,KAAK,IAAI,KAAKE,IAAL,CAAUkB,sBAAV,CAAiCpB,KAAjC,CAlCb;;AAAA,SAoCdqB,gBApCc,GAoCKpB,QAAQ,IAAI,KAAKC,IAAL,CAAUY,WAAV,CAAsBQ,cAAtB,CAAqCrB,QAArC,CApCjB;;AAAA,SAwCdsB,kBAxCc,GAwCO,CAACC,IAAD,EAAOC,QAAP,KACnB,KAAKvB,IAAL,CAAUwB,kBAAV,CAA6BC,QAAQ,IAAI;AACvC,UAAIA,QAAJ,EAAc;AACZ,aAAKC,IAAL,CAAUD,QAAQ,CAACE,GAAnB,EACGC,IADH,CACQ,OADR,EAEGC,IAFH,CAEQC,QAAQ,IAAI;AAChB,gBAAMC,MAAM,GAAGD,QAAQ,CAACE,GAAT,EAAf,CADgB,CAEhB;AAEA;;AACA,cAAI,CAACD,MAAM,CAACE,KAAZ,EAAmB;AACjBF,YAAAA,MAAM,CAACE,KAAP,GAAe,EAAf;AACD,WAPe,CAShB;;;AACAR,UAAAA,QAAQ;AACNE,YAAAA,GAAG,EAAEF,QAAQ,CAACE,GADR;AAEN7B,YAAAA,KAAK,EAAE2B,QAAQ,CAAC3B,KAFV;AAGNoC,YAAAA,aAAa,EAAET,QAAQ,CAACS,aAHlB;AAINC,YAAAA,YAAY,EAAEV,QAAQ,CAACU;AAJjB,aAKHJ,MALG,CAAR;AAQAT,UAAAA,IAAI,CAACG,QAAD,CAAJ;AACD,SArBH;AAsBD,OAvBD,MAuBO;AACLF,QAAAA,QAAQ;AACT;AACF,KA3BD,CAzCY;;AAAA,SAuEdG,IAvEc,GAuEPC,GAAG,IAAI,KAAKS,EAAL,CAAQC,GAAR,CAAa,SAAQV,GAAI,EAAzB,CAvEA;;AAAA,SAyEdW,KAzEc,GAyEN,MAAM,KAAKF,EAAL,CAAQC,GAAR,CAAY,OAAZ,CAzEA;;AAAA,SA4EdE,OA5Ec,GA4EJZ,GAAG,IAAI,KAAKS,EAAL,CAAQC,GAAR,CAAa,YAAWV,GAAI,EAA5B,CA5EH;;AAAA,SA8Eda,QA9Ec,GA8EH,MAAM,KAAKJ,EAAL,CAAQC,GAAR,CAAY,UAAZ,CA9EH;;AACZ1D,IAAAA,GAAG,CAAC8D,aAAJ,CAAkB7D,MAAlB;AAEA;;AACA,SAAK8D,WAAL,GAAmB/D,GAAG,CAACgE,QAAJ,CAAaC,WAAhC;AACA,SAAKC,iBAAL,GAAyBlE,GAAG,CAACqB,IAAJ,CAAS8C,iBAAlC;AACA,SAAK9C,IAAL,GAAYrB,GAAG,CAACqB,IAAJ,EAAZ;AACA,SAAKoC,EAAL,GAAUzD,GAAG,CAACgE,QAAJ,EAAV;AAEA,SAAKrC,cAAL,GAAsB,IAAI3B,GAAG,CAACqB,IAAJ,CAAS+C,kBAAb,EAAtB;AACA,SAAKvC,gBAAL,GAAwB,IAAI7B,GAAG,CAACqB,IAAJ,CAASgD,oBAAb,EAAxB;AACA,SAAKtC,eAAL,GAAuB,IAAI/B,GAAG,CAACqB,IAAJ,CAASiD,mBAAb,EAAvB;AACD,GAbY,CAeb;;;AAfa;;AAkFf,eAAetD,QAAf","sourcesContent":["import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    /*Helpter*/\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n    this.auth = app.auth();\n    this.db = app.database();\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  }\n\n  //*** Auth API ***\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () => this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () => this.auth.signInWithPopup(this.twitterProvider);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: \"http://localhost:3000\"\n    });\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .once(\"value\")\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n            // console.log(authUser.uid);\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            }\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              ...dbUser\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  //***User API ***\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref(\"users\");\n\n  //***Message API***\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref(\"messages\");\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}