{"ast":null,"code":"import _objectSpread from\"/Users/cdot/Desktop/Road To React book projects/reactWithFirebase/react-firebase-authentication/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _classCallCheck from\"/Users/cdot/Desktop/Road To React book projects/reactWithFirebase/react-firebase-authentication/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";import app from\"firebase/app\";import\"firebase/auth\";import\"firebase/database\";var config={apiKey:process.env.REACT_APP_API_KEY,authDomain:process.env.REACT_APP_AUTH_DOMAIN,databaseURL:process.env.REACT_APP_DATABASE_URL,projectId:process.env.REACT_APP_PROJECT_ID,storageBucket:process.env.REACT_APP_STORAGE_BUCKET,messagingSenderId:process.env.REACT_APP_MESSAGING_SENDER_ID};var Firebase=function Firebase(){var _this=this;_classCallCheck(this,Firebase);this.doCreateUserWithEmailAndPassword=function(email,password){return _this.auth.createUserWithEmailAndPassword(email,password);};this.doSignInWithEmailAndPassword=function(email,password){return _this.auth.signInWithEmailAndPassword(email,password);};this.doSignInWithGoogle=function(){return _this.auth.signInWithPopup(_this.googleProvider);};this.doSignInWithFacebook=function(){return _this.auth.signInWithPopup(_this.facebookProvider);};this.doSignInWithTwitter=function(){return _this.auth.signInWithPopup(_this.twitterProvider);};this.doSendEmailVerification=function(){return _this.auth.currentUser.sendEmailVerification({url:\"http://localhost:3000\"});};this.doSignOut=function(){return _this.auth.signOut();};this.doPasswordReset=function(email){return _this.auth.sendPasswordResetEmail(email);};this.doPasswordUpdate=function(password){return _this.auth.currentUser.updatePassword(password);};this.onAuthUserListener=function(next,fallback){return _this.auth.onAuthStateChanged(function(authUser){if(authUser){_this.user(authUser.uid).once(\"value\").then(function(snapshot){var dbUser=snapshot.val();// console.log(authUser.uid);\n// default empty roles\nif(!dbUser.roles){dbUser.roles={};}// merge auth and db user\nauthUser=_objectSpread({uid:authUser.uid,email:authUser.email,emailVerified:authUser.emailVerified,providerData:authUser.providerData},dbUser);next(authUser);});}else{fallback();}});};this.user=function(uid){return _this.db.ref(\"users/\".concat(uid));};this.users=function(){return _this.db.ref(\"users\");};this.message=function(uid){return _this.db.ref(\"messages/\".concat(uid));};this.messages=function(){return _this.db.ref(\"messages\");};app.initializeApp(config);/*Helpter*/this.serverValue=app.database.ServerValue;this.emailAuthProvider=app.auth.EmailAuthProvider;this.auth=app.auth();this.db=app.database();this.googleProvider=new app.auth.GoogleAuthProvider();this.facebookProvider=new app.auth.FacebookAuthProvider();this.twitterProvider=new app.auth.TwitterAuthProvider();}//*** Auth API ***\n;export default Firebase;","map":{"version":3,"sources":["/Users/cdot/Desktop/Road To React book projects/reactWithFirebase/react-firebase-authentication/src/components/Firebase/firebase.js"],"names":["app","config","apiKey","process","env","REACT_APP_API_KEY","authDomain","REACT_APP_AUTH_DOMAIN","databaseURL","REACT_APP_DATABASE_URL","projectId","REACT_APP_PROJECT_ID","storageBucket","REACT_APP_STORAGE_BUCKET","messagingSenderId","REACT_APP_MESSAGING_SENDER_ID","Firebase","doCreateUserWithEmailAndPassword","email","password","auth","createUserWithEmailAndPassword","doSignInWithEmailAndPassword","signInWithEmailAndPassword","doSignInWithGoogle","signInWithPopup","googleProvider","doSignInWithFacebook","facebookProvider","doSignInWithTwitter","twitterProvider","doSendEmailVerification","currentUser","sendEmailVerification","url","doSignOut","signOut","doPasswordReset","sendPasswordResetEmail","doPasswordUpdate","updatePassword","onAuthUserListener","next","fallback","onAuthStateChanged","authUser","user","uid","once","then","snapshot","dbUser","val","roles","emailVerified","providerData","db","ref","users","message","messages","initializeApp","serverValue","database","ServerValue","emailAuthProvider","EmailAuthProvider","GoogleAuthProvider","FacebookAuthProvider","TwitterAuthProvider"],"mappings":"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","sourcesContent":["import app from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/database\";\n\nconst config = {\n  apiKey: process.env.REACT_APP_API_KEY,\n  authDomain: process.env.REACT_APP_AUTH_DOMAIN,\n  databaseURL: process.env.REACT_APP_DATABASE_URL,\n  projectId: process.env.REACT_APP_PROJECT_ID,\n  storageBucket: process.env.REACT_APP_STORAGE_BUCKET,\n  messagingSenderId: process.env.REACT_APP_MESSAGING_SENDER_ID\n};\n\nclass Firebase {\n  constructor() {\n    app.initializeApp(config);\n\n    /*Helpter*/\n    this.serverValue = app.database.ServerValue;\n    this.emailAuthProvider = app.auth.EmailAuthProvider;\n    this.auth = app.auth();\n    this.db = app.database();\n\n    this.googleProvider = new app.auth.GoogleAuthProvider();\n    this.facebookProvider = new app.auth.FacebookAuthProvider();\n    this.twitterProvider = new app.auth.TwitterAuthProvider();\n  }\n\n  //*** Auth API ***\n  doCreateUserWithEmailAndPassword = (email, password) =>\n    this.auth.createUserWithEmailAndPassword(email, password);\n\n  doSignInWithEmailAndPassword = (email, password) =>\n    this.auth.signInWithEmailAndPassword(email, password);\n\n  doSignInWithGoogle = () => this.auth.signInWithPopup(this.googleProvider);\n\n  doSignInWithFacebook = () => this.auth.signInWithPopup(this.facebookProvider);\n\n  doSignInWithTwitter = () => this.auth.signInWithPopup(this.twitterProvider);\n\n  doSendEmailVerification = () =>\n    this.auth.currentUser.sendEmailVerification({\n      url: \"http://localhost:3000\"\n    });\n\n  doSignOut = () => this.auth.signOut();\n\n  doPasswordReset = email => this.auth.sendPasswordResetEmail(email);\n\n  doPasswordUpdate = password => this.auth.currentUser.updatePassword(password);\n\n  // *** Merge Auth and DB User API *** //\n\n  onAuthUserListener = (next, fallback) =>\n    this.auth.onAuthStateChanged(authUser => {\n      if (authUser) {\n        this.user(authUser.uid)\n          .once(\"value\")\n          .then(snapshot => {\n            const dbUser = snapshot.val();\n            // console.log(authUser.uid);\n\n            // default empty roles\n            if (!dbUser.roles) {\n              dbUser.roles = {};\n            }\n\n            // merge auth and db user\n            authUser = {\n              uid: authUser.uid,\n              email: authUser.email,\n              emailVerified: authUser.emailVerified,\n              providerData: authUser.providerData,\n              ...dbUser\n            };\n\n            next(authUser);\n          });\n      } else {\n        fallback();\n      }\n    });\n\n  //***User API ***\n  user = uid => this.db.ref(`users/${uid}`);\n\n  users = () => this.db.ref(\"users\");\n\n  //***Message API***\n  message = uid => this.db.ref(`messages/${uid}`);\n\n  messages = () => this.db.ref(\"messages\");\n}\n\nexport default Firebase;\n"]},"metadata":{},"sourceType":"module"}